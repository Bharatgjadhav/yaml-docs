A Docker image is a private file system just for your container.
 It provides all the files and code your container needs

 Start a container based on the image you built in the previous step.
  Running a container launches your application with private resources,
securely isolated from the rest of your machine.



By default docker doesn't listen to stdin
-i :Interactive mode
-t
-p : For port mapping 

docker run -v /opt/datadir:/var/lib/mysql mysql

docker inspect container name

docker log container name //To view detached mode process in details 

docker run ubuntu cat /etc/*release*

keep alive for 1000sec && Run container in background with -d option 

docker run -d ubuntu sleep 1000

docker run -d --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql

docker run -v /opt/data:/var/lib/mysql -d --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql


To run container In  foreground
 
docker attach containerID

Docker history image name 


bharatjadhav04
/
secondtest



If anyone else gets here:
Be sure to build your code first with your username/repo before trying to push it.

Example:
docker build -t <username>/<repo>:<tag> .
Then you can push
docker push <username>/<repo>:<tag>

Hope this helps.


sudo docker push bharatjadhav04/my-simple-webapp:myfirstimage 

Environment variable
*command line parameter will get appended

docker inspect container name 

docker run -p 38282:8080 -d -e APP_COLOR=blue --name blue-app  kodekloud/simple-webapp

docker run -d -e MYSQL_ROOT_PASSWORD=db_pass123 --name mysql-db mysql
docker exec -it mysql-db env

sudo docker run -d --name=redis redis

addition al command:
---------------

docker info | more

docker system df 
docker system df -v


 sudo docker run -d --name=redis redis
 sudo docker run -p 5000:80 -d --link redis:redis --name=voting-app voting-app
sudo docker run --name=db -d postgres:9.4
  sudo docker run --link redis:redis --link db:db -d --name=worker-app worker-app
   sudo docker run -p 5001:80 --link db:db result-app



Docker Compose
-----------------------------------------------

Docker image creation 
Docker composer to run multiple containers at a same time with existing image

NameSpace-PID
-------------- 
docker exec containerID ps -eaf
ps -eaf | grep process-name

copy on write

volumes
-------------
volume mount 
docker run -v data_volume:/var/lib/mysql mysql

bind mount 

docker run -v /data/mysql:/var/lib/mysql mysql

docker run \
--mount type=bind,source=/data/mysql,target=/var/lib/mysql mysql

Docker has  layered architecture
-------------------------------


 


Docker network
--------------
bridge:docker default network
none
host

docker network ls 
docker inspect containerID

docker run --name alpine-2 --network=none alpine

docker network create --driver bridge --subnet 182.18.0.1/24 --gateway 182.18.0.1 wp-mysql-network
docker network inspect wp-mysql-network

docker run -d -e MYSQL_ROOT_PASSWORD=db_pass123 --name mysql-db --network wp-mysql-network mysql:5.6

docker run --network=wp-mysql-network -e DB_Host=mysql-db -e DB_Password=db_pass123 -p 38080:8080 --name webapp --link mysql-db:mysql-db -d kodekloud/simple-webapp-mysql




















